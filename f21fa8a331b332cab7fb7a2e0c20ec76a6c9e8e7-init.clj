nil (do (set! *warn-on-reflection* nil) (require (quote cljsbuild.compiler) (quote cljsbuild.crossover) (quote cljsbuild.util)) (try (do (do (clojure.core/letfn [(copy-crossovers__6690__auto__ [] (cljsbuild.crossover/copy-crossovers "/home/raphael/Bureau/lab/seder/target/cljsbuild-crossover" (quote [])))] (copy-crossovers__6690__auto__) (clojure.core/when false (cljsbuild.util/once-every-bg 1000 "copying crossovers" copy-crossovers__6690__auto__)) (clojure.core/let [crossover-macro-paths__6691__auto__ (cljsbuild.crossover/crossover-macro-paths (quote [])) builds__6692__auto__ (clojure.core/for [opts__6693__auto__ (quote ({:parsed-notify-command {:shell ()}, :id "app", :source-paths ("src/cljs" "env/prod/cljs" "env/prod/cljs"), :jar false, :notify-command nil, :incremental true, :assert true, :compiler {:source-map "resources/public/js/out.js.map", :preamble ["react/react.min.js"], :output-dir "resources/public/js/out", :output-to "resources/public/js/app.js", :optimizations :advanced, :warnings true, :externs ["closure-js/externs"], :libs ["closure-js/libs"], :pretty-print false}}))] [opts__6693__auto__ (cljs.env/default-compiler-env (:compiler opts__6693__auto__))])] (clojure.core/doseq [[build__6694__auto__ compiler-env__6695__auto__] builds__6692__auto__] (clojure.core/doseq [handler__6696__auto__ (:warning-handlers build__6694__auto__)] (clojure.core/when (clojure.core/symbol? handler__6696__auto__) (clojure.core/let [[n__6697__auto__ sym__6698__auto__] (clojure.string/split (clojure.core/str handler__6696__auto__) #"/")] (clojure.core/assert (clojure.core/and n__6697__auto__ sym__6698__auto__) (clojure.core/str "Symbols for :warning-handlers must be fully-qualified, " (clojure.core/pr-str handler__6696__auto__) " is missing namespace.")) (clojure.core/when (clojure.core/and n__6697__auto__ sym__6698__auto__) (clojure.core/require (clojure.core/symbol n__6697__auto__))))))) (clojure.core/loop [dependency-mtimes__6699__auto__ (clojure.core/repeat (clojure.core/count builds__6692__auto__) {})] (clojure.core/let [builds-mtimes__6700__auto__ (clojure.core/map clojure.core/vector builds__6692__auto__ dependency-mtimes__6699__auto__) new-dependency-mtimes__6701__auto__ (clojure.core/doall (clojure.core/for [[[build__6694__auto__ compiler-env__6695__auto__] mtimes__6702__auto__] builds-mtimes__6700__auto__] (cljs.analyzer/with-warning-handlers (clojure.core/if-let [handlers__6703__auto__ (:warning-handlers build__6694__auto__)] (clojure.core/mapv (clojure.core/fn [handler__6696__auto__] (if (clojure.core/symbol? handler__6696__auto__) (clojure.core/resolve handler__6696__auto__) handler__6696__auto__)) (clojure.core/eval handlers__6703__auto__)) cljs.analyzer/*cljs-warning-handlers*) (clojure.core/binding [cljs.env/*compiler* compiler-env__6695__auto__] (cljsbuild.compiler/run-compiler (:source-paths build__6694__auto__) "/home/raphael/Bureau/lab/seder/target/cljsbuild-crossover" crossover-macro-paths__6691__auto__ (:compiler build__6694__auto__) (:parsed-notify-command build__6694__auto__) (:incremental build__6694__auto__) (:assert build__6694__auto__) mtimes__6702__auto__ false)))))] (clojure.core/when false (java.lang.Thread/sleep 100) (recur new-dependency-mtimes__6701__auto__))))))) (java.lang.System/exit 0)) (catch cljsbuild.test.TestsFailedException e__6686__auto__ (java.lang.System/exit 1)) (catch java.lang.Exception e__6686__auto__ (do (.printStackTrace e__6686__auto__) (java.lang.System/exit 1)))))